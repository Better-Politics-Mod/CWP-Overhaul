korean_war = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect

	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	icon = "gfx/interface/icons/event_icons/event_industry.dds"

	scripted_button = korean_war_diplo_delegation
	scripted_button = korean_war_auto_decline
	scripted_button = korean_war_ask
	scripted_button = korean_war_auto_accept

	# optional trigger which determines if a journal entry can be shown, default = no
	# is ignored when JE is added through `add_journal_entry` effect
	is_shown_when_inactive = {
		OR = {
			this = c:NRK
			this = c:STK
			country_rank >= rank_value:great_power
		}
		has_variable = involved_in_korea
	}

	# one or more scripted buttons. See common/scripted_buttons/_scripted_buttons.info for more info
	#scripted_button = scripted_button_key

	# optional trigger - when both this and is_shown_when_inactive is true, the JE is Activated, default = yes
	# is ignored when JE is added through `add_journal_entry` effect
	possible = {
		OR = {
			country_rank >= rank_value:great_power
			has_variable = involved_in_korea
		}
	}

	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		random_country = {
			limit = {
				has_journal_entry = korean_war
				has_variable = non_communist_leading
			}
			save_scope_as = non_communist_leader
		}
		random_country = {
			limit = {
				has_journal_entry = korean_war
				has_variable = communist_leading
			}
			save_scope_as = communist_leader
		}
		clamp_global_variable = {
			name = korean_tensions
			min = 0
			max = 100
		}
	}

	# completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
	complete = {
		global_var:korean_tensions <=5
		custom_tooltip = {
			text = korean_war_timeout_tooltip 
			game_date >= 1950.1.1
		}
	}

	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
		any_scope_country = {
			remove_variable = involved_in_korea
			if = {
				limit = {
					has_variable = non_communist_leading
				}
				remove_variable = non_communist_leading
			}
			else_if = {
				limit = {
					has_variable = communist_leading
				}
				remove_variable = communist_leading
			}
		}
	}

	# failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
	fail = {
		global_var:korean_tensions >=5
		custom_tooltip = {
			text = korean_war_timeout_tooltip 
			game_date >= 1950.1.1
		}
	}

	# effect which is executed when 'fail' trigger becomes true
	on_fail = {
	}

	# optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
	invalid = {
		OR = {
			NOT = {
				exists = c:NRK
			}
			c:NRK = {
				is_country_alive = no
			}
			NOT = {
				exists = c:STK
			}
			c:STK = {
				is_country_alive = no
			}
			custom_tooltip = {
				text = involved_in_korea_text
				ROOT = {
					NOT = {
						has_variable = involved_in_korea
					}
				}
			}
			custom_tooltip = {
				text = north_korea_war_with_south
				c:NRK ?= {
					has_war_with ?= c:STK
				}
			}
			custom_tooltip = {
				text = south_korea_war_with_north
				c:STK ?= {
					has_war_with ?= c:NRK
				}
			}
		}
	}

	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {

	}

	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = {
		first_valid = {
			triggered_desc = {
				desc = korean_tensions_high_loc
				trigger = {
					global_var:korean_tensions > 75
				}
			}
			triggered_desc = {
				desc = korean_tensions_medium_loc
				trigger = {
					global_var:korean_tensions >= 50
				}
			}
			triggered_desc = {
				desc = korean_tensions_low_loc
				trigger = {
					global_var:korean_tensions < 50
				}
			}
		}
	}

	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 0

	# effect which is executed when journal entry is timed out
	on_timeout = {
	}

	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
	}

	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
		effect = {
			random_list = {
				100 = {
					trigger_event = {
						id = korea_war_events.10
						days = { 30 60 }
					}
				}
			}
		}
	}

	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
		effect = {
		}
	}

	# a script value computing the goal completion metric
	current_value = {
		value = global_var:korean_tensions
	}

	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 200

	# yes/no, determines if this journal entry should be transfered if the player switches country through a revolution or by releasing a subject. Note that external dependencies such as country variables etc are not automatically inherited
	transferable = yes

	# yes/no, determines if this journal entry is allowed to be inherited by a victorious revolution. Revolutions also get all variables from the defeated parent country, so most JEs *should* be inherited in this way
	# NOTE: transferable = yes will always mean that revolution inheritance is blocked as these JEs should stay with the player at all times
	can_revolution_inherit = yes

	# optional trigger, progress text is shown if this is defined and true
	is_progressing = {
	}

	# yes/no, if yes, a progress bar is shown
	progressbar = no

	# yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
	# if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
	can_deactivate = yes

	# dynamically updated text, which is shown over the progress bar of the Journal Entry
	# value can be a localization key or first_valid + triggered_desc script
	# To use in loc or UI: [JournalEntry.GetProgressDesc]
	# If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
	#progress_desc = indian_partition_progress_desc

	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = yes
}
