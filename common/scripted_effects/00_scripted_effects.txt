#	Example:
# 
#	example_effect = {
#		x = 100
#		y = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#
save_neighbor_with_state = {
	random_neighbouring_state = {
		limit = {
			owner = {
				$CRITERIA$
			}
		}
		save_scope_as = neighbor_state
		owner = {
			save_scope_as = neighbor_country
		}
		random_neighbouring_state = {
			limit = {
				owner = ROOT
			}
			save_scope_as = neighbor_neighbor_state
		}
	}
}

scripted_effect_parties_emergence = {
	if = {
		limit = {
			country_has_voting_franchise = no
		}
		custom_tooltip = PARTIES_EMERGENCE
	}
	# Will immediately trigger elections and thus update parties so no need to call update_party_support here
}

scripted_effect_parties_disappearance = {
	if = {
		limit = {
			country_has_voting_franchise = yes
		}
		custom_tooltip = PARTIES_DISAPPEARANCE
	}

	deactivate_parties = yes
}

save_revolution_scopes = {
	random_civil_war = {
		limit = {
			is_civil_war_type = revolution
		}
		save_scope_as = ongoing_revolution
	}
	random_political_movement = {
		limit = {
			is_revolutionary_movement = yes
		}
		save_scope_as = ongoing_revolution_movement
	}
}

save_agitator_law_scopes = {
	if = {
		limit = {
			agitator_supports_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_stance = {
						law = owner.currently_enacting_law.type
						value > neutral
					}
					AND = {	
						law_stance = {
							law = owner.currently_enacting_law.type
							value > strongly_approve # Equals 'count'
						}
						interest_group = {
							law_stance = {
								law = owner.currently_enacting_law.type
								value > neutral
							}
							NOT = {
								law_stance = {
									law = owner.currently_enacting_law.type
									value > strongly_approve # Equals 'count'
								}
							}
						}
					}
				}
			}
			save_scope_as = supporting_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				OR = {	
					is_political_movement_type = movement_to_enact
					is_political_movement_type = movement_to_restore	
				}
				this.desired_law = root.currently_enacting_law.type
			}
			save_scope_as = supporting_movement
		}
	}
	
	if = {
		limit = {
			agitator_opposes_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_stance = {
						law = owner.currently_enacting_law.type
						value < neutral
					}
					AND = {	
						law_stance = {
							law = owner.currently_enacting_law.type
							value > strongly_approve # Equals 'count'
						}
						interest_group = {
							law_stance = {
								law = owner.currently_enacting_law.type
								value < neutral
							}
							NOT = {
								law_stance = {
									law = owner.currently_enacting_law.type
									value > strongly_approve # Equals 'count'
								}
							}
						}
					}
				}
			}
			save_scope_as = opposing_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				is_political_movement_type = movement_to_preserve
			}
			save_scope_as = opposing_movement
		}
	}
}

scripted_effect_recalculate_german_reunification_voting = {
	set_global_variable= { name = var_total_vote_reunification_unifier_ger value = german_reunification_total_vote_unifier_ger }
	set_global_variable= { name = var_total_vote_reunification_unifier_no_reunification value = german_reunification_total_vote_unifier_no_reunification }
	set_global_variable= { name = var_total_vote_reunification_unifier_ddr value = german_reunification_total_vote_unifier_ddr }
			
	set_global_variable	= { name = var_total_vote_reunification_government_system_like_unifier value = german_reunification_total_vote_government_system_like_unifier }
	set_global_variable	= { name = var_total_vote_reunification_government_system_mix value = german_reunification_total_vote_government_system_mix }

	set_global_variable	= { name = var_total_vote_reunification_economical_system_like_unifier value = german_reunification_total_vote_economical_system_like_unifier }
	set_global_variable	= { name = var_total_vote_reunification_economical_system_mix value = german_reunification_total_vote_economical_system_mix }

	set_global_variable	= { name = var_total_vote_reunification_faction_nato value = german_reunification_total_vote_faction_nato }
	set_global_variable	= { name = var_total_vote_reunification_faction_neutral value = german_reunification_total_vote_faction_neutral }
	set_global_variable	= { name = var_total_vote_reunification_faction_warsaw_pact value = german_reunification_total_vote_faction_warsaw_pact }

	set_global_variable	= { name = var_total_vote_reunification_solidarpakt_yes value = german_reunification_total_vote_solidarpakt_yes }
	set_global_variable	= { name = var_total_vote_reunification_solidarpakt_no value = german_reunification_total_vote_solidarpakt_no }

	set_global_variable	= { name = var_total_vote_reunification_claims_yes value = german_reunification_total_vote_claims_yes }
	set_global_variable	= { name = var_total_vote_reunification_claims_no value = german_reunification_total_vote_claims_no }
}

scripted_effect_german_reunification = {

	#Unifier
	if = {
		limit = {
			german_reunification_total_vote_unifier_ger >= german_reunification_total_vote_unifier_ddr
		}
		
		c:GER = { save_scope_as = german_unifier }
		c:DDR = { save_scope_as = not_german_unifier }
	}
	else = {
		c:DDR = { save_scope_as = german_unifier }
		c:GER = { save_scope_as = not_german_unifier }
	}

	#Government System | May be redesigned to be more interesting
	if = {
		limit = {
			german_reunification_total_vote_government_system_mix >= german_reunification_total_vote_government_system_like_unifier
		}
		SCOPE:german_unifier = {	
			activate_law = SCOPE:not_german_unifier.active_law:lawgroup_centralization.type
			activate_law = SCOPE:not_german_unifier.active_law:lawgroup_bureaucratic_systems.type
		}
	}

	#Economical System | May be redesigned to be more interesting
	if = {
		limit = {
			german_reunification_total_vote_economical_system_mix >= german_reunification_total_vote_economical_system_like_unifier
		}
		SCOPE:german_unifier = {	
			activate_law = SCOPE:not_german_unifier.active_law:lawgroup_taxation.type
			activate_law = SCOPE:not_german_unifier.active_law:lawgroup_health_system.type
		}
	}

	#Faction | Todo: Add Germany to the list of applicants if not yet a member, instead of directly granting it the full membership status
	if = {
		limit = {
			german_reunification_total_vote_faction_nato >= german_reunification_total_vote_faction_warsaw_pact
			german_reunification_total_vote_faction_nato >= german_reunification_total_vote_faction_neutral
		}
		SCOPE:german_unifier = {	
			custom_tooltip	= {
				text = GERMANY_JOINS_NATO
				effect_warsaw_pact_leave = yes
				add_to_global_variable_list = {
					name = nato_members
					target = THIS
				}
			}
		}
	}
	else_if = {
		limit = {
			german_reunification_total_vote_faction_warsaw_pact >= german_reunification_total_vote_faction_nato
			german_reunification_total_vote_faction_warsaw_pact >= german_reunification_total_vote_faction_neutral
		}	
		SCOPE:german_unifier = {	
			custom_tooltip	= {
				text = GERMANY_JOINS_WARSAW_PACT
				effect_nato_leave = yes
					add_to_global_variable_list = {
					name = warsaw_members
					target = THIS
				}
			}
		}
	}
	else = {
		SCOPE:german_unifier = {
			custom_tooltip	= {
				text = GERMANY_BECOMES_NEUTRAL	
				effect_nato_leave = yes
				effect_warsaw_pact_leave = yes
			}
		}
	}

	#Solidarpakt
	if = {
		limit = {
			german_reunification_total_vote_solidarpakt_yes >= german_reunification_total_vote_solidarpakt_no
		}
		SCOPE:german_unifier = {
			custom_tooltip	= {
				text = GERMANY_PROMISES_SOLIDARPAKT
				set_variable = has_solidarpakt
			}
		}
	}

	#Claims
	if = {
		limit = {
			german_reunification_total_vote_claims_yes >= german_reunification_total_vote_claims_no
		}
		s:STATE_WEST_POMERANIA = {
			add_claim = SCOPE:german_unifier
		}
		s:STATE_SILESIA = {
			add_claim = SCOPE:german_unifier
		}
		s:STATE_KRALOVEC = {
			add_claim = SCOPE:german_unifier
		}
		s:STATE_GREATER_POLAND = {
			add_claim = SCOPE:german_unifier
		}
		s:STATE_POMEMASURIA = {
			add_claim = SCOPE:german_unifier
		}
	}
	else = {
		s:STATE_WEST_POMERANIA = {
			remove_claim = SCOPE:german_unifier
		}
		s:STATE_SILESIA = {
			remove_claim = SCOPE:german_unifier
		}
		s:STATE_KRALOVEC = {
			remove_claim = SCOPE:german_unifier
		}
		s:STATE_GREATER_POLAND = {
			remove_claim = SCOPE:german_unifier
		}
		s:STATE_POMEMASURIA = {
			remove_claim = SCOPE:german_unifier
		}
	}

	#Complete reunification
	SCOPE:german_unifier = { annex = SCOPE:not_german_unifier }

}