onaction_nuclear_calculation = {
	# Nuclear Calculations
	if = {
		limit = {
			has_modifier = atomic_capable
		}
		change_variable = {
			name = nuclear_stockpile
			add = nuclear_stockpile_sum
		}
		clamp_variable = {
			name = nuclear_stockpile
			max = 1410065407
			min = 0
		}
	}
}

onaction_renewable_modifier = {
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_excellent_solar_capacity = yes
			}
		}
		add_modifier = {
			name = excellent_solar_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_excellent_wind_capacity = yes
			}
		}
		add_modifier = {
			name = excellent_wind_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_excellent_hydroelectric_capacity = yes
			}
		}
		add_modifier = {
			name = excellent_hydroelectric_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_moderate_solar_capacity = yes
			}
		}
		add_modifier = {
			name = moderate_solar_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_moderate_wind_capacity = yes
			}
		}
		add_modifier = {
			name = moderate_wind_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_moderate_hydroelectric_capacity = yes
			}
		}
		add_modifier = {
			name = moderate_hydroelectric_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_poor_solar_capacity = yes
			}
		}
		add_modifier = {
			name = poor_solar_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_poor_wind_capacity = yes
			}
		}
		add_modifier = {
			name = poor_wind_capacity
		}
	}
	if = {
		limit = {
			is_building_type = building_renewable_energy_facility
			Root.state = {
				is_poor_hydroelectric_capacity = yes
			}
		}
		add_modifier = {
			name = poor_hydroelectric_capacity
		}
	}
}

onaction_currency_calculation_annex = {
	# Currency Calculations
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = cwp_currency
				}
			}
		}
		scope:target = {
			set_variable = {
				name = cwp_currency
				value = root.var:cwp_currency
			}
		}
	}
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = foreign_reserves
				}
			}
		}
		scope:target = {
			set_variable = {
				name = foreign_reserves
				value = 0
			}
		}
	}
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = inflation_rate
				}
			}
		}
		scope:target = {
			set_variable = {
				name = inflation_rate
				value = 0
			}
		}
	}
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = interest_rate_gui
				}
			}
		}
		scope:target = {
			set_variable = {
				name = interest_rate_gui
				value = 2
			}
		}
	}
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = interest_rate
				}
			}
		}
		scope:target = {
			set_variable = {
				name = interest_rate
				value = 2
			}
			add_modifier = {
				name = interest_rates
				multiplier = 2
			}
		}
	}
	if = {
		limit = {
			scope:target = {
				nor = {
					has_variable = contractionary_monetary_policy
					has_variable = stable_monetary_policy
					has_variable = expansionary_monetary_policy
				}
			}
		}
		scope:target = {
			set_variable = stable_monetary_policy
		}
	}
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = bank_credibility
				}
			}
		}
		scope:target = {
			set_variable = {
				name = bank_credibility
				value = 19
			}
			set_variable = {
				name = previous_bank_credibility
				value = var:bank_credibility
			}
		}
	}
	if = {
		limit = {
			scope:target = {
				not = {
					has_variable = money_supply
				}
			}
		}
		scope:target = {
			set_variable = {
				name = money_supply
				value = 0
			}
		}
	}
}

onaction_monetary_variables_creation = {
	if = {
		limit = {
			not = {
				has_variable = foreign_reserves
			}
		}
		set_variable = {
			name = foreign_reserves
			value = 0
		}
	}
	if = {
		limit = {
			not = {
				has_variable = inflation_rate
			}
		}
		set_variable = {
			name = inflation_rate
			value = 0
		}
	}
	if = {
		limit = {
			not = {
				has_variable = interest_rate_gui
			}
		}
		set_variable = {
			name = interest_rate_gui
			value = 2
		}
	}
	if = {
		limit = {
			not = {
				has_variable = interest_rate
			}
		}
		set_variable = {
			name = interest_rate
			value = 2
		}
		add_modifier = {
			name = interest_rates
			multiplier = 2
		}
	}
	if = {
		limit = {
			nor = {
				has_variable = contractionary_monetary_policy
				has_variable = stable_monetary_policy
				has_variable = expansionary_monetary_policy
			}
		}
		set_variable = stable_monetary_policy
	}
	if = {
		limit = {
			not = {
				has_variable = bank_credibility
			}
		}
		set_variable = {
			name = bank_credibility
			value = 19
		}
		set_variable = {
			name = previous_bank_credibility
			value = var:bank_credibility
		}
	}
	if = {
		limit = {
			not = {
				has_variable = money_supply
			}
		}
		set_variable = {
			name = money_supply
			value = 0
		}
	}
}

onaction_palestine = {
	if = {
		limit = {
			scope:target = {
				country_has_primary_culture = cu:ashkenazi
			}
			NOT = {
				s:STATE_PALESTINE = {
					is_homeland = cu:ashkenazi
				}
			}
		}
		s:STATE_PALESTINE = {
			add_homeland = cu:sephardic
			add_homeland = cu:ashkenazi
		}
	}
}

onaction_skyscraper_modifier = {
	remove_modifier = state_skyscraper_modifier
	add_modifier = {
		name = state_skyscraper_modifier
		multiplier = {
			value = total_urbanization
			add = 500			#You can always build at least one level of office in state.
			divide = 1000
			round = yes
		}
	}
}

onaction_slums_modifier = {
	if = {
		limit = {
			this = {
				state_max_slums > 0
			}
		}
		remove_modifier = state_slum_modifier
		add_modifier = {
			name = state_slum_modifier
			multiplier = {
				value = state_max_slums
				round = yes
				max = 100
			}
		}
	}
	if = {
		limit = {
			this = {
				state_max_slums <= 0
			}
		}
		remove_modifier = state_slum_modifier
	}
}

onaction_urbanization_modifier = {
	# Urbanization modifier update
	set_local_variable = {
		name = urbanization_rate_modifier
		value = {
			value = total_urbanization
			divide = {
				# Gets ratio between arable land and total urbanization, value between 0 and 1
				value = arable_land
				multiply = 100
				add = 1
				add = total_urbanization
			}
			add = -0.75			# Shifts the value to be between -0.75 and 0.25
			multiply = 150			# Scales up value to be between -112.5 and 37.5
			min = -75
			max = 25
			round = yes			# Modifier ends up being between 75% and -25% birth rate
		}
	}
	remove_modifier = urbanization_modifier
	add_modifier = {
		name = urbanization_modifier
		multiplier = local_var:urbanization_rate_modifier
	}
}